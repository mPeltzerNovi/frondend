[{"C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\index.js":"1","C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\reportWebVitals.js":"2","C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\App.js":"3","C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\components\\Header.js":"4","C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\pages\\SignUp.js":"5","C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\pages\\Profile.js":"6","C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\pages\\SignIn.js":"7","C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\pages\\Home.js":"8","C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\context\\AuthContext.js":"9"},{"size":610,"mtime":1612019678273,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":792,"mtime":1612019583603,"results":"13","hashOfConfig":"11"},{"size":1534,"mtime":1612019219084,"results":"14","hashOfConfig":"11"},{"size":3980,"mtime":1612021542956,"results":"15","hashOfConfig":"11"},{"size":1090,"mtime":1612019411500,"results":"16","hashOfConfig":"11"},{"size":3455,"mtime":1612021456712,"results":"17","hashOfConfig":"11"},{"size":931,"mtime":1612019384420,"results":"18","hashOfConfig":"11"},{"size":2702,"mtime":1612019262199,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"vpr59t",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\index.js",[],["44","45"],"C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\reportWebVitals.js",[],"C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\App.js",[],"C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\components\\Header.js",["46"],"import React, { useContext, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext, useAuthState } from '../context/AuthContext';\r\n\r\nfunction Header() {\r\n    const history = useHistory();\r\n\r\n    // context dingen\r\n    const { isAuthenticated } = useAuthState();\r\n    const { logout } = useContext(AuthContext);\r\n\r\n    // useEffect(() => {\r\n    //   if (isAuthenticated === false) {\r\n    //     history.push('/signin');\r\n    //   }\r\n    // }, [isAuthenticated]);\r\n\r\n    return (\r\n        <header>\r\n            <div>\r\n                {isAuthenticated ? (\r\n                    <button\r\n                        type=\"button\"\r\n                        // Roep hier de logout functie uit de context aan!\r\n                        onClick={() => logout()}\r\n                    >\r\n                        Log uit\r\n                    </button>\r\n                ) : (\r\n                    <>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => history.push('/signin')}\r\n                        >\r\n                            Log in\r\n                        </button>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => history.push('/signup')}\r\n                        >\r\n                            Registreren\r\n                        </button>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\pages\\SignUp.js",[],"C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\pages\\Profile.js",[],"C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\pages\\SignIn.js",["47"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { AuthContext, useAuthState } from '../context/AuthContext';\r\n\r\n\r\nfunction SignIn() {\r\n    // context-functies\r\n    const { login } = useContext(AuthContext);\r\n    const { isAuthenticated } = useAuthState();\r\n\r\n    // state voor invoervelden (omdat het formulier met Controlled Components werkt!)\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    // state voor gebruikersfeedback\r\n    const [loading, toggleLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    // react-router dingen\r\n    const history = useHistory();\r\n\r\n    // Deze functie wordt elke keer afgevuurd als isAuthenticated (uit context) veranderd\r\n    useEffect(() => {\r\n        // als hij de waarde true heeft, DAN sturen we de gebruiker door!\r\n        if (isAuthenticated === true) {\r\n            history.push('/profile');\r\n        }\r\n    }, [isAuthenticated]);\r\n\r\n    async function onSubmit(event) {\r\n        toggleLoading(true);\r\n        setError('');\r\n        // Als je react-hook-form gebruikt hoeft dit niet, dat gebeurt dan automatisch\r\n        event.preventDefault();\r\n\r\n        try {\r\n            const response = await axios.post('https://polar-lake-14365.herokuapp.com/api/auth/signin', {\r\n                username: username,\r\n                password: password,\r\n            })\r\n\r\n            // We roepen hier de context-functie \"login\" aan. De context gaat dan met de data die we hebben\r\n            // teruggekregen alles op de juiste manier in localstorage en state zetten!\r\n            login(response.data);\r\n        } catch(e) {\r\n            // Gaat het mis? Log het in de console!\r\n            console.error(e);\r\n            setError('Inloggen is mislukt');\r\n            // Tip: als de gebruikersnaam niet bestaat of wachtwoord is verkeerd, stuurt de backend een 401!\r\n        }\r\n        toggleLoading(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Inloggen</h1>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab alias cum debitis dolor dolore fuga id molestias qui quo unde?</p>\r\n\r\n            <form onSubmit={onSubmit}>\r\n                <label htmlFor=\"username-field\">\r\n                    Gebruikersnaam:\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"username-field\"\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                    />\r\n                </label>\r\n\r\n                <label htmlFor=\"password-field\">\r\n                    Wachtwoord:\r\n                    <input\r\n                        type=\"password\"\r\n                        id=\"password-field\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)} />\r\n                </label>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"form-button\"\r\n                    disabled={loading}\r\n                >\r\n                    {loading ? 'Loading...' : 'Maak account aan'}\r\n                </button>\r\n                {error && <p>{error}</p>}\r\n            </form>\r\n            <p>Heb je nog geen account? <Link to=\"/signup\">Registreer</Link> je dan eerst.</p>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SignIn;","C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\pages\\Home.js",["48","49"],"import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { AuthContext, useAuthState } from '../context/AuthContext';\r\n\r\nfunction Home() {\r\n    const { isAuthenticated } = useAuthState();\r\n    console.log(isAuthenticated);\r\n\r\n    // const authState = useContext(AuthContext);\r\n    // const isAuthenticated = authState.user !== null && authState.status === 'done';\r\n    // console.log(isAuthenticated);\r\n\r\n    return (\r\n        <>\r\n            <h1>Homepagina</h1>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab alias cum debitis dolor dolore fuga id molestias qui quo unde?</p>\r\n            <p>Als je ingelogd bent, bekijk dan de <Link to=\"/profile\">Profielpagina</Link></p>\r\n            <p>Je kunt ook <Link to=\"/signin\">inloggen</Link> of jezelf <Link to=\"/signup\">registeren</Link> als je nog geen account hebt.</p>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","C:\\Users\\mpelt\\WebstormProjects\\frondend\\src\\context\\AuthContext.js",["50"],"import React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\nconst AuthContext = createContext({});\r\n\r\nfunction AuthContextProvider({ children }) {\r\n    const [authState, setAuthState] = useState({\r\n        status: 'pending',\r\n        error: null,\r\n        user: null,\r\n    })\r\n\r\n    useEffect(() => {\r\n        // haal uit de local storage de JWT Token\r\n        // Als die er niet is, kunnen we gewoon verder\r\n        // Als die token er wel is, dan betekend dat dat de applicatie herstart is\r\n        // En dan willen we nog even onze gebruikersdata (username, etc.) ophalen.\r\n\r\n        setTimeout(() => {\r\n            // er is geen token, dus we beginnen met een schone lei!\r\n            setAuthState({\r\n                ...authState,\r\n                status: 'done',\r\n            })\r\n        }, 2000)\r\n    }, []);\r\n\r\n    function login(data) {\r\n        // 1. de token willen we in de local storage zetten\r\n        localStorage.setItem('token', data.accessToken);\r\n\r\n        // 2. de user-informatie willen we in de context zetten\r\n        setAuthState({\r\n            ...authState,\r\n            user: {\r\n                username: data.username,\r\n                email: data.email,\r\n                roles: data.roles,\r\n            }\r\n        })\r\n\r\n        // 3. als dat allemaal gelukt is, willen we doorgelinkt worden naar de profielpagina!\r\n        // Dit doen we in het component dat deze functie aanroept, zelf!\r\n    }\r\n\r\n    function logout() {\r\n        // 1. Maak local storage leeg\r\n        localStorage.clear();\r\n        // 2. Haal de user uit de context-state\r\n        setAuthState({\r\n            ...authState,\r\n            user: null,\r\n        })\r\n    }\r\n\r\n    // als je hem helemaal uit zou schrijven en als variabele mee zou geven aan AuthContext.Provider:\r\n    // const providerData = {\r\n    //   ...authState,\r\n    //   login: login,\r\n    //   logout: logout,\r\n    // };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ ...authState, login, logout }}>\r\n            {authState.status === 'done' && children}\r\n            {authState.status === 'pending' && <p>Loading...</p>}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\nfunction useAuthState() {\r\n    const authState = useContext(AuthContext);\r\n\r\n    // iemand is geauthoriseerd wanneer de status === 'done'\r\n    // en als er een gebruiker in de authState staat\r\n    const isDone = authState.status === 'done';\r\n    const isAuthenticated = authState.user !== null && isDone;\r\n\r\n    // console.log('Ik ben authenticated:', isAuthenticated);\r\n\r\n    return {\r\n        ...authState,\r\n        isAuthenticated: isAuthenticated,\r\n    }\r\n}\r\n\r\nexport {\r\n    AuthContext,\r\n    useAuthState,\r\n    AuthContextProvider,\r\n}",["51","52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":29,"nodeType":"59","messageId":"60","endLine":1,"endColumn":38},{"ruleId":"61","severity":1,"message":"62","line":29,"column":8,"nodeType":"63","endLine":29,"endColumn":25,"suggestions":"64"},{"ruleId":"57","severity":1,"message":"65","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":27},{"ruleId":"57","severity":1,"message":"66","line":3,"column":10,"nodeType":"59","messageId":"60","endLine":3,"endColumn":21},{"ruleId":"61","severity":1,"message":"67","line":25,"column":8,"nodeType":"63","endLine":25,"endColumn":10,"suggestions":"68"},{"ruleId":"53","replacedBy":"69"},{"ruleId":"55","replacedBy":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["73"],"'useContext' is defined but never used.","'AuthContext' is defined but never used.","React Hook useEffect has a missing dependency: 'authState'. Either include it or remove the dependency array. You can also do a functional update 'setAuthState(a => ...)' if you only need 'authState' in the 'setAuthState' call.",["74"],["71"],["72"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [history, isAuthenticated]",{"range":"79","text":"80"},"Update the dependencies array to be: [authState]",{"range":"81","text":"82"},[1048,1065],"[history, isAuthenticated]",[832,834],"[authState]"]